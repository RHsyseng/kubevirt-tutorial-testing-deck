Kubevirt-Tutorial: Testing
Maintain your Laboratories tested
15 Jul 2019
Tags: Testing, K8s, Kubevirt, Laboratories

Juan Manuel Parrilla
Senior Software Engineer, Red Hat
jparrill@redhat.com
https://github.com/RHsyseng/kubevirt-tutorial-testing-deck
@kerbeross


#* About me

#- Programming enthusiast
#- Redhatter
#- Openshift/Kubernetes Lover

#.image img/jparrill_avatar.jpg _ 300

#.background img/background.png
#.caption [[https://github.com/RHsyseng/kubevirt-tutorial-testing-deck][Kubevirt Laboratory Testing]] by Juan Manuel Parrilla


* Agenda

- What is Kubevirt-Tutorial and Why test it?
- Way of work
- Literate Programming with MDSH
- Make Tool as a Build/Test entrypoint
- K8s cluster on a DIND job
- Including it on a CI/CD chain
- Final result

.background img/background.png
.caption [[https://github.com/RHsyseng/kubevirt-tutorial-testing-deck][Kubevirt Laboratory Testing]] by Juan Manuel Parrilla


* What is Kubevirt-Tutorial and Why test it? 
.background img/background.png


* What is Kubevirt-Tutorial and Why test it? 

[[https://github.com/kubevirt/kubevirt-tutorial][Kubevirt-Tutorial]] repository has a serie of laboratories to put your hands on [[https://github.com/kubevirt/kubevirt][Kubevirt]].

- The laboratories was delivered on some conferences like DevConf, OpenSouthCode, ContainerDays.io and we hope to be delivered on some more 
- In order to trust on that labs when the time comes, we need to maintain tested those labs in a CI/CD way.

*But...there* *is* *no* *code* *there...* *how* *do* *we* *do?*

- Well, that's not true at all, you just need to wrap some sections of your labs and then use a couple of tools to play it properly.  

.background img/background.png


* Way of work

Those are the Key pieces of this testing model

- [[https://github.com/bashup/mdsh][MDSH]]: This tool will extract the code from Markdown files.
- `Make` tool as entrypoint for the Code Building/Testing
- [[https://github.com/kubevirt/kubevirtci][KubevirtCI]]: This tool will spin up a K8s cluster inside of a container
- CI/CD Server, in this case [[https://github.com/kubernetes/test-infra/tree/master/prow][Prow]] (Needs `--privilleged` in order to use Nested Virt)

.background img/background.png


* Literate Programming with MDSH

You just need to identify the which block of code will you want to extract from MD files. To do this, you will add this header, including the lang that you will parse:

	```bash @mdsh
	mdsh-lang-bash() { shell; }
	```

With this header, you will extract all the code wrapped between quotes that contains the `shell` name. As a sample, [[https://github.com/kubevirt/kubevirt-tutorial/blob/774acdc1335424c7570246b055ed7e3ca72a27b9/labs/lab002/lab002.md][this file]] will produce this output:

	```shell
	## LAB 002
	
	kubectl version
	kubectl get pv
	kubectl get all -n prometheus
	```

using just this command: `mdsh` `--out` `lab002.sh` `-c` `lab002.md`
.caption What is [[https://en.wikipedia.org/wiki/Literate_programming][Literate Programming]]

.background img/background.png


* Make Tool as a Build/Test entrypoint

This is the usual tool, [[https://github.com/kubevirt/kubevirt-tutorial/blob/774acdc1335424c7570246b055ed7e3ca72a27b9/Makefile][we've used this Makefile as entrypoint]] for build and test stages. And also a couple of Bash files:

- *Build*: Will generate the (in this case) the SH files that will be tested
- *Tests*: This script will take care of requirements installation, Spin up of K8s platform, deploy the laboratory base in order to test the provision and then execution of the labs over it.

*Tests* uses another script that executes every lab by separated, following this way we could have more traceability checking every command, output and the time that it takes.

.background img/background.png


* K8s cluster on a Prow DIND job

- Using an already existant "TARGET" on KubevirtCI, this will spin up a K8s cluster inside of a container.
- This is the workflow on local:
Shell > KubevirtCI container > VM > Control Plane Containers

- This is the workflow on Prow: 
Job Pod > KubevirtCI container > VM > Control Plane Containers

- To do it, just execute this:

	```
	TARGET=k8s-multus-1.13.3 && make cluster-up
	```

After that you will have some helpers on *cluster-up* folder to access the Vagrant VM, using kubectl or ssh to VMs created over Kubevirt

.background img/background.png


* Including it on a CI/CD chain using Prow
The tests workflow:

- Trigger a Job from a PR or a Periodic task
- Creates a Pod that will be the sandbox.
- Creates a VM inside the pod that will contain a K8s cluster
- Deploy the Laboratory Base on the K8s deployed, simulating the same as we do for conferences
- Execute the labs like every student will do (not all the commands, just the non-blocking ones)
- Upload the results to GCS and also finish the job as fail if any lab fails or as succeed if all works fine.
- Just 1 retry allowed per Lab to avoid corner cases.
.background img/background.png


* Including it on a CI/CD chain using Prow

- *Prow* is a bit special managing DIND (Docker-in-Docker) jobs, it will need some extra config Job pod that will create the container and inside the VM 
- Must be privilleged job
.code samples/kubevirt-tutorial-periodics.yaml /securityContext:/,/privileged/
- It needs some extra ram
.code samples/kubevirt-tutorial-periodics.yaml /resources:/,/memory/
- Also needs a concrete image to work fine: 
.code samples/kubevirt-tutorial-periodics.yaml /- image:/,//
.background img/background.png


* Including it on a CI/CD chain using Prow
- It needs some presets in order to configure this job as a DIND one.
.code samples/prow-config.yaml /presets:/,/mountPath/

.background img/background.png


* Including it on a CI/CD chain using Prow
- Other important need from this kind of job its the docker config which stores things like MTU and where will be located the /docker-graph folder
.code samples/prow-config.yaml /- labels:\n    preset-docker-mirror:/,/readOnly/
.background img/background.png


* Final result 
This is the result, 2 jobs that will be executed following different rules:

- The first one, the tests will be triggered on every PR.
- The second one, after every 96h (customizable).
- We will increase the supported versions of K8s adding scenarios to KubevirtCI repo.
- We store the logs for a week, of every lab and also of the whole test suite.

.image img/GCS_overview.png _ 700
.background img/background.png


* Final result 
Logs stored by every lab executed which includes ([[https://pastebin.com/raw/a09KiC17][Sample]]):

- Input Command, Output response, Real Time spent
.image img/GCS_lab_logs_overview.png _ 700
.background img/background.png


* Final result 
And [[https://pastebin.com/raw/t7rgK8Bb][this is part of the output]] on the Job:
.image img/GCS_build_log.png
.background img/background.png


* Questions? 
.background img/background.png

